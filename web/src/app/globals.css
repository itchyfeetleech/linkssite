@import "tailwindcss";

:root {
  /* ANSI-esque palette */
  --bg: #0a0c0e;
  --bg-2: #0e1216;
  --fg: #d1f7d6; /* phosphor green */
  --dim: #8aa399;
  --scan: rgba(255,255,255,0.04);
  --accent: #00ffa6;
  --accent-2: #22d3ee; /* cyan */
  --warn: #ff9f1c;
  --danger: #ff3b3b;

  /* fonts from next/font */
  --font-mono-stack: var(--font-mono), ui-monospace, SFMono-Regular, Menlo, Consolas, "Liberation Mono", monospace;
  --font-pixel: var(--font-vt323), var(--font-mono-stack);

  /* master dial for CRT overlays */
  --crt-intensity: 0.12;
  /* derived alphas for container glow/fringe (slightly reduced) */
  --bloom-core: calc(0.05 * var(--crt-intensity));
  --bloom-outer: calc(0.025 * var(--crt-intensity));
  --fringe: calc(0.012 * var(--crt-intensity));
}

*, *::before, *::after { box-sizing: border-box; }
html, body { height: 100%; }
body {
  margin: 0;
  background:
    radial-gradient(120% 120% at 10% -10%, #0c1116 0%, transparent 50%),
    radial-gradient(120% 120% at 110% 10%, #0b1014 0%, transparent 50%),
    linear-gradient(180deg, var(--bg-2), var(--bg));
  color: var(--fg);
  font-family: var(--font-mono-stack);
  text-rendering: optimizeLegibility;
}

/* Subtle CRT overlay */
.crt::after {
  content: "";
  pointer-events: none;
  position: fixed;
  inset: 0;
  background:
    repeating-linear-gradient(0deg, rgba(255,255,255,0.04) 0px, rgba(255,255,255,0.04) 1px, transparent 1px, transparent 3px),
    linear-gradient(0deg, rgba(0,0,0,0.15), transparent 60%);
  mix-blend-mode: overlay;
  opacity: 0; /* moved to WebGL */
  animation: none;
  animation: crtPhase 12s ease-in-out infinite alternate;
  z-index: 1;
}

/* New full-viewport CRT scene root */
.crt-scene { position: relative; min-height: 100dvh; width: 100%; z-index: 2; }

/* Desktop shell fills viewport */
.desktop {
  position: relative;
  width: 100%;
  min-height: 100dvh;
  padding: 48px 16px 80px;
}

/* Simple top bar */
.topbar {
  position: fixed;
  top: 0; left: 0; right: 0;
  height: 36px;
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 0 12px;
  background: linear-gradient(180deg, rgba(0,0,0,0.45), rgba(0,0,0,0.2));
  border-bottom: 1px solid rgba(255,255,255,0.06);
  z-index: 3;
  color: var(--fg);
}
.topbar .brand { font: 14px/1 var(--font-pixel); opacity: .85; letter-spacing: 0.5px; }
.topbar .status { display: flex; align-items: center; gap: 8px; }
.badge { font: 11px/1 var(--font-mono-stack); padding: 4px 6px; border-radius: 6px; background: rgba(0,0,0,0.35); border: 1px solid rgba(255,255,255,0.08); opacity: .8; }
.badge.hq { color: #9efcc7; border-color: rgba(0,255,166,0.25); }

/* Program window (reusing .terminal styles) */
.window { margin: 0 auto; }

/* Bottom dock */
.dock {
  position: fixed;
  left: 50%; bottom: 16px; transform: translateX(-50%);
  height: 56px; padding: 8px 12px; border-radius: 14px;
  background: linear-gradient(180deg, rgba(0,0,0,0.3), rgba(0,0,0,0.2));
  border: 1px solid rgba(255,255,255,0.06);
  display: flex; gap: 10px; align-items: center;
  z-index: 3;
}
.dock .icon { width: 36px; height: 36px; border-radius: 8px; background: rgba(255,255,255,0.06); box-shadow: inset 0 0 0 1px rgba(255,255,255,0.05); }

/* Terminal window (TERMINAL_WINDOW) */
.terminal {
  width: min(980px, calc(100% - 16px));
  border: 1px solid rgba(0,255,166,0.25);
  background: radial-gradient(120% 120% at 50% 20%, rgba(7,10,12,0.9), rgba(0,0,0,0.85)),
              linear-gradient(180deg, rgba(0,0,0,0.35), rgba(0,0,0,0.65));
  box-shadow: 0 10px 40px rgba(0,0,0,0.6), inset 0 0 0 1px rgba(0,255,166,0.06);
  border-radius: 10px;
  overflow: hidden;
  position: relative;
  transform: perspective(1200px) rotateX(0.35deg) rotateY(-0.25deg);
  isolation: isolate; /* ensure blend overlays interact within terminal */
}

/* Full CRT overlay (scanlines + vignette + subtle curvature shine) */
.terminal::before {
  content: "";
  position: absolute;
  inset: 0;
  pointer-events: none;
  background:
    repeating-linear-gradient(0deg,
      rgba(255,255,255,0.045) 0px,
      rgba(255,255,255,0.045) 1px,
      rgba(0,0,0,0.00) 2px,
      rgba(0,0,0,0.00) 4px);
  mix-blend-mode: overlay;
  opacity: 0; /* moved to WebGL */
  animation: none;
  z-index: 3;
}

.terminal::after {
  content: "";
  position: absolute;
  inset: -2%;
  pointer-events: none;
  background:
    radial-gradient(120% 100% at 50% 10%, rgba(255,255,255,0.05), rgba(255,255,255,0.02) 40%, rgba(0,0,0,0.3) 82%, rgba(0,0,0,0.6) 100%);
  mix-blend-mode: overlay;
  opacity: calc(0.65 * var(--crt-intensity));
  z-index: 2;
}

/* Aperture grille / shadow mask simulation (dark stripes only to preserve color) */
.screen::before {
  content: "";
  position: absolute;
  inset: 0;
  pointer-events: none;
  background-image:
    repeating-linear-gradient(
      90deg,
      rgba(0,0,0,0.06) 0px, rgba(0,0,0,0.06) 1px,
      rgba(0,0,0,0.00) 1px, rgba(0,0,0,0.00) 3px
    );
  mix-blend-mode: multiply;
  opacity: 0; /* moved to WebGL */
  z-index: 1;
}

/* Subtle rolling brightness band */
.screen::after {
  content: "";
  position: absolute;
  left: 0; right: 0; top: -40%; height: 40%;
  pointer-events: none;
  background: linear-gradient(180deg, rgba(255,255,255,0.06), rgba(255,255,255,0));
  filter: blur(6px);
  animation: none; /* moved to WebGL */
  opacity: 0;
  z-index: 1;
}

@keyframes roll {
  0% { transform: translateY(0); }
  100% { transform: translateY(180%); }
}

@keyframes crtFlicker {
  /* Soften amplitude to reduce flashing */
  0%, 100% { opacity: .44; }
  43% { opacity: .46; }
  44% { opacity: .43; }
  45% { opacity: .45; }
  70% { opacity: .44; }
}

@keyframes scanShift {
  0% { background-position: 0 0; }
  100% { background-position: 0 1px; }
}

@keyframes crtPhase {
  0% { opacity: calc(0.33 * var(--crt-intensity)); }
  100% { opacity: calc(0.37 * var(--crt-intensity)); }
}
.titlebar {
  display: flex;
  align-items: center;
  gap: 10px;
  padding: 10px 14px;
  color: var(--dim);
  background: linear-gradient(180deg, rgba(10,12,14,0.8), rgba(10,12,14,0.4));
  border-bottom: 1px solid rgba(0,255,166,0.15);
  font-family: var(--font-pixel);
  letter-spacing: 0.5px;
}
.dots { display: inline-flex; gap: 6px; margin-right: 6px; }
.dot { width: 10px; height: 10px; border-radius: 50%; background: currentColor; opacity: .35; }
.title { color: var(--fg); opacity: .8; }

.screen { padding: 18px 18px 24px; position: relative; overflow: hidden; }
/* Aggregate bloom: subtle content bleed */
.screen { filter: none; }
canvas.scroller-layer {
  position: absolute;
  inset: 0 0 auto 0;
  height: clamp(180px, 36vh, 320px);
  width: 100%;
  pointer-events: none;
  mix-blend-mode: screen;
  opacity: 0.9;
}

/* WebGL lens warp overlay (LENS_WARP_CANVAS) */
canvas.lens-warp {
  position: absolute;
  inset: 0;
  width: 100%;
  height: 100%;
  pointer-events: none; /* keep DOM interactive */
  z-index: 5; /* above .screen content & overlays */
}

pre.nfo {
  margin: 0 0 18px 0;
  color: var(--fg);
  font: 16px/1.1 var(--font-pixel);
  white-space: pre;
}
.prompt { color: var(--accent-2); }
.muted { color: var(--dim); }
.divider { color: rgba(255,255,255,0.2); }

.nfo-list { margin: 18px 0 0; padding: 0; list-style: none; font: 16px/1.1 var(--font-pixel); color: var(--fg); }
.nfo-item {
  display: flex;
  gap: 12px;
  align-items: center;
  padding: 6px 0;
}
.nfo-key {
  color: var(--fg);
  min-width: 120px;
  display: inline-block;
  text-shadow: none;
}
.nfo-arrow {
  color: var(--fg);
  text-shadow: none;
}
@keyframes arrowPulse {
  0%, 100% { text-shadow: 0 0 2px rgba(34,211,238,0.35), 0 0 6px rgba(34,211,238,0.22); }
  50% { text-shadow: 0 0 3px rgba(34,211,238,0.6), 0 0 10px rgba(34,211,238,0.38); }
}
.nfo-item a {
  color: var(--fg);
  text-decoration: none;
  text-shadow: none;
}
.nfo-item a:hover { color: var(--fg); text-shadow: none; text-decoration: underline; }

/* Background WebGL canvas (BACKGROUND_CANVAS) remains, retinted via CSS */
.bg { position: fixed; inset: 0; z-index: 0; }
.bg.webgl { filter: none; opacity: 0.35; }
.bg.fog { display: none; }

@media (max-width: 640px) {
  pre.nfo { font-size: 14px; }
  .nfo-key { min-width: 90px; }
}

/* SVG warp disabled in favor of WebGL lens to avoid double processing */
@supports (filter: url(#crt-all)) {
  .terminal { /* no-op: WebGL lens handles curvature */ }
}

/* High-DPI adjustments to reduce moir√© */
@media (min-resolution: 1.5dppx) and (max-resolution: 1.99dppx) {
  .terminal::before {
    background:
      repeating-linear-gradient(0deg,
        rgba(255,255,255,0.035) 0px,
        rgba(255,255,255,0.035) 2px,
        rgba(0,0,0,0.00) 4px,
        rgba(0,0,0,0.00) 8px);
  }
  .screen::before {
    background-image:
      repeating-linear-gradient(
        90deg,
        rgba(0,0,0,0.06) 0px, rgba(0,0,0,0.06) 2px,
        rgba(0,0,0,0.00) 2px, rgba(0,0,0,0.00) 6px
      );
  }
}

@media (min-resolution: 2dppx) {
  .terminal::before {
    background:
      repeating-linear-gradient(0deg,
        rgba(255,255,255,0.035) 0px,
        rgba(255,255,255,0.035) 2px,
        rgba(0,0,0,0.00) 6px,
        rgba(0,0,0,0.00) 12px);
  }
  .screen::before {
    background-image:
      repeating-linear-gradient(
        90deg,
        rgba(0,0,0,0.06) 0px, rgba(0,0,0,0.06) 2px,
        rgba(0,0,0,0.00) 2px, rgba(0,0,0,0.00) 6px
      );
  }
}

/* Respect reduced motion */
@media (prefers-reduced-motion: reduce) {
  .terminal::before { animation: none; }
  .crt::after { animation: none; }
  .screen::after { animation: none; }
  :root { --crt-intensity: 0.6; }
}
